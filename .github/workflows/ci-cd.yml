name: Enhanced Binna Platform CI/CD

on:
  push:
    branches: [ main, develop, enhancement-* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'

jobs:
  # Lint and Test
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:ci
      env:
        CI: true
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
          dist/
        key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
  
  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level moderate || true  # Don't fail CI on moderate vulnerabilities
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true  # Don't fail CI on security scan issues during setup
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
  
  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.binna.sa
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel Staging
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./
        scope: ${{ secrets.TEAM_ID }}
  
  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://binna.sa
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel Production
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        scope: ${{ secrets.TEAM_ID }}
  
  # Deploy Standalone Products
  deploy-standalone:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        product: [
          { name: 'pos', port: '3001', domain: 'pos.binna.sa' },
          { name: 'inventory', port: '3002', domain: 'inventory.binna.sa' },
          { name: 'accounting', port: '3003', domain: 'accounting.binna.sa' },
          { name: 'crm', port: '3004', domain: 'crm.binna.sa' },
          { name: 'analytics', port: '3005', domain: 'analytics.binna.sa' }
        ]
    
    environment:
      name: production-${{ matrix.product.name }}
      url: https://${{ matrix.product.domain }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set project ID
      id: set-project-id
      run: |
        case "${{ matrix.product.name }}" in
          "pos")
            echo "project_id=${{ secrets.PROJECT_ID_POS }}" >> $GITHUB_OUTPUT
            ;;
          "inventory")
            echo "project_id=${{ secrets.PROJECT_ID_INVENTORY }}" >> $GITHUB_OUTPUT
            ;;
          "accounting")
            echo "project_id=${{ secrets.PROJECT_ID_ACCOUNTING }}" >> $GITHUB_OUTPUT
            ;;
          "crm")
            echo "project_id=${{ secrets.PROJECT_ID_CRM }}" >> $GITHUB_OUTPUT
            ;;
          "analytics")
            echo "project_id=${{ secrets.PROJECT_ID_ANALYTICS }}" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "project_id=${{ secrets.PROJECT_ID }}" >> $GITHUB_OUTPUT
            ;;
        esac
    
    - name: Build ${{ matrix.product.name }}
      run: |
        if [ -d "src/standalone/${{ matrix.product.name }}" ]; then
          cd src/standalone/${{ matrix.product.name }}
          npm ci
          npm run build
        else
          echo "Standalone product ${{ matrix.product.name }} directory not found, skipping..."
          exit 0
        fi
    
    - name: Deploy ${{ matrix.product.name }}
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ steps.set-project-id.outputs.project_id }}
        vercel-args: '--prod'
        working-directory: ./src/standalone/${{ matrix.product.name }}
        scope: ${{ secrets.TEAM_ID }}
  
  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          https://staging.binna.sa
          https://staging-pos.binna.sa
          https://staging-inventory.binna.sa
        uploadArtifacts: true
        temporaryPublicStorage: true
  
  # Database Migration
  database-migration:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run database migrations
      run: |
        # Add database migration commands here
        echo "Running database migrations..."
        # npm run db:migrate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
  
  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-standalone]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
